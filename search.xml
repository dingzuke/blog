<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>柯里化-偏函数-反柯里化</title>
      <link href="/ke-li-hua-pian-han-shu-fan-ke-li-hua.html"/>
      <url>/ke-li-hua-pian-han-shu-fan-ke-li-hua.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-柯里化"><a href="#1-柯里化" class="headerlink" title="1. 柯里化"></a>1. 柯里化</h3><p> <strong>描述：</strong>柯里化算是特殊的偏函数，把一个多参数函数转换成多个单参数函数，也就是说把一个具有n个参数的函数转换成n个一元函数</p><p><strong> 特点： </strong> </p><p>1、闭包，调用柯里化函数（currie）返回另外一个函数（_myFn），通过闭包缓存真正执行运算的函数（fn）和参数（args）</p><p>2、 通过返回的函数传递参数，并进行判断，如果参数已经传递够了，就执行函数（fn)并返回结果，如果参数还没传递完，则继续返回函数（_myFn）接收参数</p><p><strong>例子：</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 正常写法</span><span class="token keyword">const</span> add <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a<span class="token operator">+</span>b<span class="token keyword">const</span> resAdd <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 柯里化</span><span class="token keyword">const</span> add <span class="token operator">=</span> a <span class="token operator">=</span><span class="token operator">></span> b <span class="token operator">=</span><span class="token operator">></span> a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token keyword">const</span> resCurrie <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></code></pre><h3 id="2-偏函数"><a href="#2-偏函数" class="headerlink" title="2. 偏函数"></a>2. 偏函数</h3><p><strong>描述： </strong>偏函数又叫局部应用，固定函数的一个或多个参数  </p><p><strong>特点：</strong>偏函数的代码比较简单，就是利用闭包缓存实际的执行方法（fn）和与之的参数（preset），然后返回一个接收剩余参数的方法，方法的实现就是执行fn并返回结果</p><p><strong>举例：</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 一般写法 </span><span class="token comment" spellcheck="true">// 封装一个ajax方法</span><span class="token keyword">function</span> ajax <span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token operator">...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 调用ajax方法，</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">'http://xxx.com'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token string">'aa'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 回调 A })</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">'http://xxx.com'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> b<span class="token punctuation">:</span> <span class="token string">'bb'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 回调 B })</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">'http://xxx.com'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> y<span class="token punctuation">:</span> <span class="token string">'yy'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 回调 Y })</span><span class="token comment" spellcheck="true">// 上面url参数重复填写</span><span class="token comment" spellcheck="true">// 偏函数</span><span class="token keyword">function</span> partial <span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">ajax</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> cb<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 调用偏函数</span><span class="token keyword">const</span> partialAjax <span class="token operator">=</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'http://lyn.com'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 发送ajax请求</span><span class="token function">partialAjax</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token string">'aa'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 回调 A })</span><span class="token function">partialAjax</span><span class="token punctuation">(</span><span class="token punctuation">{</span> b<span class="token punctuation">:</span> <span class="token string">'bb'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 回调 B })</span><span class="token function">partialAjax</span><span class="token punctuation">(</span><span class="token punctuation">{</span> y<span class="token punctuation">:</span> <span class="token string">'yy'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 回调 Y })</span></code></pre><h3 id="3-反柯里化"><a href="#3-反柯里化" class="headerlink" title="3.反柯里化"></a>3.反柯里化</h3><p><strong>描述：</strong> 反柯里化作用和偏函数相反，它的本质是增强一个函数的使用范围，让一个对象可以使用不属于对象自己的方法，就像apply、call、bind（也有偏函数的作用）的作用，而事实上反柯里化就是通过apply、call方法实现的。</p><p><strong>举例：</strong></p><pre class=" language-javascript"><code class="language-javascript">Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>uncurrie <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 参数obj是需要操作的对象</span>  <span class="token comment" spellcheck="true">// 这里的this是指obj对象需要借用的方法，比如示例中的Array.prototype.push</span>  <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 难点，以下代码相当于：fn.call(obj, ...args), 没理解请看下面的 “代码解析” 部分</span>    <span class="token keyword">return</span> Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>call<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token punctuation">[</span>obj<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 示例，导出Array.prototype.push方法给对象使用</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token string">'aa'</span> <span class="token punctuation">}</span><span class="token keyword">const</span> push <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>push<span class="token punctuation">.</span><span class="token function">uncurrie</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// {0: "b", 1: "c", a: "aa", length: 2}</span></code></pre><p>参考：<a href="https://segmentfault.com/a/1190000022416728" target="_blank" rel="noopener">https://segmentfault.com/a/1190000022416728</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 柯里化 </tag>
            
            <tag> 偏函数 </tag>
            
            <tag> 反柯里化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu设置chrome和firefox开机全屏自启</title>
      <link href="/ubuntu-she-zhi-chrome-he-firefox-kai-ji-quan-ping-zi-qi.html"/>
      <url>/ubuntu-she-zhi-chrome-he-firefox-kai-ji-quan-ping-zi-qi.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-设置开机自启浏览器"><a href="#一-设置开机自启浏览器" class="headerlink" title="一. 设置开机自启浏览器"></a>一. 设置开机自启浏览器</h3><h5 id="注：-此设置基于ubuntu系统"><a href="#注：-此设置基于ubuntu系统" class="headerlink" title="注： 此设置基于ubuntu系统"></a>注： 此设置基于ubuntu系统</h5><h6 id="1-新建autostar"><a href="#1-新建autostar" class="headerlink" title="1.新建autostar"></a>1.新建autostar</h6><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看有没有autostart文件,没有新建</span>$ <span class="token function">mkdir</span> ~/.config/autostart</code></pre><h6 id="2-拷贝-desktop-到-autostart"><a href="#2-拷贝-desktop-到-autostart" class="headerlink" title="2.拷贝.desktop 到 autostart"></a>2.拷贝.desktop 到 autostart</h6><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查找应用位置(如谷歌) sudo find / -name *google-chrome.desktop  </span>$ <span class="token function">cp</span> /usr/share/applications/firefox.desktop ~/.config/autostart/</code></pre><h6 id="3-文件授权"><a href="#3-文件授权" class="headerlink" title="3.文件授权"></a>3.文件授权</h6><pre class=" language-bash"><code class="language-bash">$ <span class="token function">chmod</span> +x ~/.config/autostart/firefox.desktop</code></pre><p><img src="/images/pasted-22.png" alt="upload successful"></p><p><img src="/images/pasted-23.png" alt="upload successful"></p><h3 id="二-设置火狐全屏设置"><a href="#二-设置火狐全屏设置" class="headerlink" title="二. 设置火狐全屏设置"></a>二. 设置火狐全屏设置</h3><h6 id="1-火狐浏览器自动全屏插件：-Auto-Fullscreen-注：容易安装成另外一款，特此标注"><a href="#1-火狐浏览器自动全屏插件：-Auto-Fullscreen-注：容易安装成另外一款，特此标注" class="headerlink" title="1.火狐浏览器自动全屏插件： Auto Fullscreen  注：容易安装成另外一款，特此标注"></a>1.火狐浏览器自动全屏插件： Auto Fullscreen  注：容易安装成另外一款，特此标注</h6><p><img src="/images/pasted-25.png" alt="upload successful"></p><h6 id="2-设置浏览器打开不显示上次的历史记录"><a href="#2-设置浏览器打开不显示上次的历史记录" class="headerlink" title="2.设置浏览器打开不显示上次的历史记录"></a>2.设置浏览器打开不显示上次的历史记录</h6><p><img src="/images/pasted-27.png" alt="upload successful"><br><img src="/images/pasted-26.png" alt="upload successful"></p><h3 id="三-谷歌全屏，不输密码设置"><a href="#三-谷歌全屏，不输密码设置" class="headerlink" title="三. 谷歌全屏，不输密码设置"></a>三. 谷歌全屏，不输密码设置</h3><h6 id="1-每次打开谷歌需要输入密码，免密设置如下"><a href="#1-每次打开谷歌需要输入密码，免密设置如下" class="headerlink" title="1.每次打开谷歌需要输入密码，免密设置如下"></a>1.每次打开谷歌需要输入密码，免密设置如下</h6><p><img src="/images/pasted-31.png" alt="upload successful"></p><p><img src="/images/pasted-32.png" alt="upload successful"></p><h6 id="2-谷歌浏览器全屏设置"><a href="#2-谷歌浏览器全屏设置" class="headerlink" title="2.谷歌浏览器全屏设置"></a>2.谷歌浏览器全屏设置</h6><p><img src="/images/pasted-28.png" alt="upload successful"></p><p><img src="/images/pasted-29.png" alt="upload successful"><br>在command输入最后写入启动打开的地址和全屏参数：<code>http://localhost:8000 --start-fullscreen</code></p><pre><code>/usr/bin/google-chrome-stable %U http://localhost:8000 --start-fullscreen</code></pre><p><img src="/images/pasted-30.png" alt="upload successful"></p><h6 id="保存即可"><a href="#保存即可" class="headerlink" title="保存即可!"></a>保存即可!</h6>]]></content>
      
      
      <categories>
          
          <category> ubuntu浏览器自启设置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu  </tag>
            
            <tag> 浏览器自启全屏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js事件流</title>
      <link href="/js-shi-jian-liu.html"/>
      <url>/js-shi-jian-liu.html</url>
      
        <content type="html"><![CDATA[<h3 id="js事件流"><a href="#js事件流" class="headerlink" title="js事件流"></a>js事件流</h3><h6 id="概念-HTML中与javascript交互是通过事件驱动来实现的，例如鼠标点击事件、页面的滚动事件onscroll等等-当页面产生一个事件时-该事件会在元素节点与根节点之间的路径传播，路径所经过的节点都会收到该事件，这个传播的过程叫做DOM事件流"><a href="#概念-HTML中与javascript交互是通过事件驱动来实现的，例如鼠标点击事件、页面的滚动事件onscroll等等-当页面产生一个事件时-该事件会在元素节点与根节点之间的路径传播，路径所经过的节点都会收到该事件，这个传播的过程叫做DOM事件流" class="headerlink" title="概念:HTML中与javascript交互是通过事件驱动来实现的，例如鼠标点击事件、页面的滚动事件onscroll等等,当页面产生一个事件时,该事件会在元素节点与根节点之间的路径传播，路径所经过的节点都会收到该事件，这个传播的过程叫做DOM事件流"></a>概念:HTML中与javascript交互是通过事件驱动来实现的，例如鼠标点击事件、页面的滚动事件onscroll等等,当页面产生一个事件时,该事件会在元素节点与根节点之间的路径传播，路径所经过的节点都会收到该事件，这个传播的过程叫做DOM事件流</h6><h5 id="一-当页面产生一个事件时经过的三个阶段"><a href="#一-当页面产生一个事件时经过的三个阶段" class="headerlink" title="一. 当页面产生一个事件时经过的三个阶段:"></a>一. 当页面产生一个事件时经过的三个阶段:</h5><ol><li>事件捕获阶段<br>document顶部先接收到事件，依次往下传播到事件节点（可以借用addEventListener来模拟事件捕获流）</li><li>处于目标阶段</li><li>事件冒泡阶段<br>事件开始时由最具体的元素接收，然后逐级向上传播<br>执行流程:<br><img src="/images/pasted-19.png" alt="upload successful"></li></ol><h5 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码:"></a>示例代码:</h5><p><img src="/images/pasted-20.png" alt="upload successful"><br><img src="/images/pasted-21.png" alt="upload successful"><br>说明: addEventListener 第一个参数: 事件名称, 第二个参数: 触发函数, 第三个参数: 布尔 默认false, true表示捕获阶段触发, fals事件冒泡阶段</p><h5 id="三：js阻止事件冒泡和默认事件"><a href="#三：js阻止事件冒泡和默认事件" class="headerlink" title="三：js阻止事件冒泡和默认事件"></a>三：js阻止事件冒泡和默认事件</h5><p>阻止事件冒泡:<br>w3c:e.stopPropagation<br>ie:window.event.cancelBubble = true</p><p>默认事件：是指目标元素的默认行为比如a标签会跳转链接 form会提交表单<br>w3c:e.preventDefault()<br>ie:window.event.returnValue = false</p><p>另外js中的return false也可以阻止默认行为,jq中的return false既可以阻止默认行为也可以阻止冒泡</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token comment" spellcheck="true">// 事件绑定的方式, 用return false; 不会阻止默认事件</span>  oBtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'btn处于事件冒泡阶段 - 5'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 以下代码 return false;可以阻止</span>oBtn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>return false ? <a href="https://blog.csdn.net/andyzhaojianhui/article/details/45581463" target="_blank">参考文章</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>节流和防抖</title>
      <link href="/jie-liu-he-fang-dou.html"/>
      <url>/jie-liu-he-fang-dou.html</url>
      
        <content type="html"><![CDATA[<h5 id="函数防抖-debounce"><a href="#函数防抖-debounce" class="headerlink" title="函数防抖(debounce)"></a>函数防抖(debounce)</h5><p><strong>含义:</strong> 在事件被触发n秒后再执行回调，如果在这n秒内又被触发，则重新计时。</p><p>debounce 使用场景</p><ul><li>search搜索联想，用户在不断输入值时，用防抖来节约请求资源。</li><li>window触发resize的时候，不断的调整浏览器窗口大小会不断的触发这个事件，用防抖来让其只触发一次</li><li>频繁操作点赞和取消点赞，因此需要获取最后一次操作结果并发送给服务器</li></ul><p>代码示例:</p><pre class=" language-javascript"><code class="language-javascript">   <span class="token operator">&lt;</span>Input placeholder<span class="token operator">=</span><span class="token string">"搜索"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleSearch<span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token comment" spellcheck="true">/**     * 防抖函数--异步搜索     */</span>    <span class="token keyword">private</span> debounce <span class="token operator">=</span> <span class="token punctuation">(</span>fn<span class="token punctuation">:</span> Function<span class="token punctuation">,</span> delay<span class="token punctuation">:</span> number <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>            <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>            timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>_this<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="函数节流-throttle"><a href="#函数节流-throttle" class="headerlink" title="函数节流(throttle)"></a>函数节流(throttle)</h5><p><strong>含义:</strong> 规定在一个单位时间内，只能触发一次函数。如果这个单位时间内触发多次函数，只有一次生效。</p><ul><li>throttle使用场景</li><li>鼠标不断点击触发，mousedown(单位时间内只触发一次)</li><li>监听滚动事件，比如是否滑到底部自动加载更多，用throttle来判断</li></ul><p>代码示例:</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">/**     * 节流函数     */</span>    <span class="token keyword">private</span> throttle <span class="token operator">=</span> <span class="token punctuation">(</span>fn<span class="token punctuation">:</span> Function<span class="token punctuation">,</span> delay<span class="token punctuation">:</span> number <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> isRuning <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isRuning<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            isRuning <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                isRuning <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>_this<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h5><p><strong>函数防抖：</strong> 将多次操作合并为一次操作进行。原理是维护一个计时器，规定在delay时间后触发函数，但是在delay时间内再次触发的话，就会取消之前的计时器而重新设置。这样一来，只有最后一次操作能被触发。</p><p><strong>函数节流：</strong> 使得一定时间内只触发一次函数。原理是通过判断是否有延迟调用函数未执行</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 防抖 </tag>
            
            <tag> 节流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序web-view中使用JSSDK,ios安卓踩坑</title>
      <link href="/web-view-react-zhong-jssdk.html"/>
      <url>/web-view-react-zhong-jssdk.html</url>
      
        <content type="html"><![CDATA[<h6 id="背景-在小程序中使用web-view使用react-需要调用相关JSSDK的接口配置-IOS能正常使用-安卓却签名错误invalid-signature"><a href="#背景-在小程序中使用web-view使用react-需要调用相关JSSDK的接口配置-IOS能正常使用-安卓却签名错误invalid-signature" class="headerlink" title="背景: 在小程序中使用web-view使用react,需要调用相关JSSDK的接口配置, IOS能正常使用,安卓却签名错误invalid signature"></a>背景: 在小程序中使用web-view使用react,需要调用相关JSSDK的接口配置, IOS能正常使用,安卓却签名错误<font color="red" size="4">invalid signature</font></h6><h6 id="基础配置按照官方文档来-这里说明下配置注意事项"><a href="#基础配置按照官方文档来-这里说明下配置注意事项" class="headerlink" title="基础配置按照官方文档来, 这里说明下配置注意事项:"></a>基础配置按照<a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html" target="_blank">官方文档</a>来, 这里说明下配置注意事项:</h6><ol><li><p>引入微信jssdk，wx.config所用到的工具函数，appid 要使用<font color="red" size="4">公众号的APPID</font>，如果APPID使用的是小程序的APPID，config时会报签名无效，要注意config签名参数的大小写</p></li><li><p>在公众号里面配置,js安全域名配置成web-view的域名</p></li></ol><p>以上配置成功后, 在IOS中使用都能正常使用, 却在安卓机器上使用签名失败<font color="red" size="4">invalid signature</font>, 硬是没在网上找到相关解决方案, 很多都是安卓使用正常, IOS使用异常. </p><p>煎熬两天综合了其他问题,经过尝试终于通了,记录一下解决方案, 希望帮助遇到同样问题的人</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"https://res.wx.qq.com/open/js/jweixin-1.3.2.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token comment" spellcheck="true">// web-view进入react的第一时间, index.html时记录url</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> window<span class="token punctuation">.</span>entryUrl <span class="token operator">===</span> <span class="token string">'undefined'</span> <span class="token operator">||</span> window<span class="token punctuation">.</span>entryUrl <span class="token operator">===</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            window<span class="token punctuation">.</span>entryUrl <span class="token operator">=</span> location<span class="token punctuation">.</span>href<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 发送给后端签名时 这里就需要区分了!!</span><span class="token keyword">let</span> isAnd <span class="token operator">=</span> <span class="token regex">/(Android)/i</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//安卓终端</span><span class="token keyword">let</span> url <span class="token operator">=</span> isAnd <span class="token operator">?</span>           <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>window<span class="token punctuation">[</span><span class="token string">'entryUrl'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>                    <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>href<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/?'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>分析:</strong></p><ul><li>我这里进入web-view的地址是<code>https://dev.xxx.com?openId=xxx&amp;token=xxxx</code> </li><li>然后进入默认路由页面url已经变成<code>https://dev.xxx.com/workbench?appkey=xxx</code></li></ul><p>SPA 的router路由机制,在安卓和ios的不同, jssdk url签名的<br>ios只认第一次的路由，我只需要传第一次路由给后端就行</p>]]></content>
      
      
      <categories>
          
          <category> 小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSSDK </tag>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用的指令</title>
      <link href="/git-chang-yong-dao-de-zhi-ling.html"/>
      <url>/git-chang-yong-dao-de-zhi-ling.html</url>
      
        <content type="html"><![CDATA[<h4 id="开发时常用的指令"><a href="#开发时常用的指令" class="headerlink" title="开发时常用的指令"></a>开发时常用的指令</h4><h6 id="1-github配置-ssh-key配置"><a href="#1-github配置-ssh-key配置" class="headerlink" title="1. github配置 ssh key配置"></a>1. github配置 ssh key配置</h6><p><code>cd  ~/.ssh</code> 查看是否有id_rsa、id_rsa.pub文件，如果没有需要手动生成。</p><p><code>ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code> 一路回车.<br>登录github。打开setting-&gt;SSH keys，点击右上角 New SSH key，把生成好的公钥id_rsa.pub放进 key输入框中</p><h6 id="2-git常用命令"><a href="#2-git常用命令" class="headerlink" title="2. git常用命令"></a>2. git常用命令</h6><p><code>git branch</code> //显示分支一览表，同时确认当前所在的分支<br><code>git checkout -b aaa</code> //创建名为aaa的分支，并且切换到aaa分支  //创建名为aaa的分支<br><code>git checkout aaa</code> // 切换到aaa分支<br><code>git checkout -</code> //切换到上一分支</p><p>不小心commit了一个不应该commit的修改，但是还没有push，想回滚那个commit.<br>命令：<br><code>git log</code> // 查看提交日志 复制下commit_id<br><code>git reset --hard commit_id</code> // 回滚 </p><p>查看更改的记录(后面可以加具体的文件名)<br><code>git diff</code></p><p>合并本地 分支代码<br><code>git merge test</code>    // test为合并进来的分支</p><p>远程仓库查看<br><code>git remote -v</code></p><p>添加远程仓库<br><code>git remote add upstream https://github.com/xxxxx/kts-portal.git</code></p><p>重置远程仓库路径<br><code>git remote set-url upstream https://github.com/xxxxxx/SpringBoot.git</code></p><p>更新远程分支列表<br><code>git remote update origin --prune</code><br><code>git remote update origin -p</code></p><p>拉取远程某个分支<br><code>git pull upstream dev</code></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对数组中的某对象排序</title>
      <link href="/shu-zu-zhong-de-mou-dui-xiang-pai-xu.html"/>
      <url>/shu-zu-zhong-de-mou-dui-xiang-pai-xu.html</url>
      
        <content type="html"><![CDATA[<h6 id="利用sort方法排序"><a href="#利用sort方法排序" class="headerlink" title="利用sort方法排序"></a>利用sort方法排序</h6><p>例子: 对一组数组中的年龄排序.</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'zopp'</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'gpp'</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'yjj'</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 降序</span><span class="token keyword">function</span> <span class="token function">compare</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 打乱数组顺序</span><span class="token keyword">function</span> <span class="token function">disrupt</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0.5</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>结果,:</p><pre><code>[    {name:&#39;zopp&#39;,age:0},    {name:&#39;yjj&#39;,age:8}    {name:&#39;gpp&#39;,age:18},];</code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node版本升级管理</title>
      <link href="/ode-ban-ben-sheng-ji-guan-li.html"/>
      <url>/ode-ban-ben-sheng-ji-guan-li.html</url>
      
        <content type="html"><![CDATA[<h5 id="升级或降级node-网上找了一大堆的资料-看着头皮发麻-只需两行代码的事情"><a href="#升级或降级node-网上找了一大堆的资料-看着头皮发麻-只需两行代码的事情" class="headerlink" title="升级或降级node,网上找了一大堆的资料,看着头皮发麻,只需两行代码的事情"></a>升级或降级node,网上找了一大堆的资料,看着头皮发麻,只需两行代码的事情</h5><pre><code>    1. sudo npm install -g n  // 安装    2. sudo n v9.10.0  // 升级到某个版本  如:v9.10.0    3. sudo n stable   // 升级到最稳当版本</code></pre>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何创建发布NPM包?</title>
      <link href="/chuang-jian-fa-bu-npm-bao.html"/>
      <url>/chuang-jian-fa-bu-npm-bao.html</url>
      
        <content type="html"><![CDATA[<h6 id="前言-平时我们都是使用的别人写好的npm包-npm-i-xxx-就直接安装好了使用-本文章介绍的是如何创建自己的封装好的npm包发布。"><a href="#前言-平时我们都是使用的别人写好的npm包-npm-i-xxx-就直接安装好了使用-本文章介绍的是如何创建自己的封装好的npm包发布。" class="headerlink" title="前言: 平时我们都是使用的别人写好的npm包, npm i xxx ,就直接安装好了使用,本文章介绍的是如何创建自己的封装好的npm包发布。"></a>前言: 平时我们都是使用的别人写好的npm包, npm i xxx ,就直接安装好了使用,本文章介绍的是如何创建自己的封装好的npm包发布。</h6><ol><li><p>npm官网创建npm账户<br>npm网站地址：<code>https://www.npmjs.com/</code></p></li><li><p>命令行工具登录npm<br> <code>npm login</code></p><p> 验证登录是否成功<br> <code>npm who am i</code>如果成功会输入你npm个人信息</p><p> 内镜检测:<br> <code>npm config get registry</code> 如果输出 <code>http://registry.npmjs.org</code>就配置正确,<br> 否则要设置镜像<code>npm config set registry http://registry.npmjs.org</code></p></li><li><p>创建npm库<br><code>npm init</code><br>接下来就是一长串表单：</p><ul><li>name：填写你这个包的名字，默认是你这个文件夹的名字。不过这里要着重说一下，最好先去npm上找一下有没有同名的包。最好的测试方式就是，在命令行里面输入npm install 你要取的名字，如果报错，那么很好，npm上没有跟你同名的包，你可以放心大胆地把包发布出去。如果成功下载下来了。。。那么很不幸，改名字吧。。。</li><li>version：你这个包的版本，默认是1.0.0</li><li>description：其实我也不知道是什么，按回车就好了。。。，这个用一句话描述你的包是干嘛用的，比如我就直接：‘a plugin for express.register routes base on file path’</li><li>entry point：入口文件，默认是Index.js，你也可以自己填写你自己的文件名</li><li>test command：测试命令，这个直接回车就好了，因为目前还不需要这个。</li><li>git repository：这个是git仓库地址，如果你的包是先放到github上或者其他git仓库里，这时候你的文件夹里面会存在一个隐藏的.git目录，npm会读到这个目录作为这一项的默认值。如果没有的话，直接回车继续。</li><li>keyword：这个是一个重点，这个关系到有多少人会搜到你的npm包。尽量使用贴切的关键字作为这个包的索引。我这个包嘛，第一是在express下工作的，然后又是一个插件plugin，然后又是一个注册路由route用的，而这个路由又是基于文件目录dir，所以很好就得出我的包的索引关键字。</li><li>author：写你的账号或者你的github账号吧</li><li>license：这个直接回车，开源文件来着。。。<br>然后它就会问你Are you ok? 直接回车<br>最后生成package.json</li></ul></li><li><p>同级目录下新建index.js并编写内容</p><pre class=" language-JavaScript"><code class="language-JavaScript">exports.sayHello=function(){　　　　return "Hello.";};</code></pre></li><li><p>发布npm包<br> <code>npm publish</code>发布完成会提示<br><img src="/images/pasted-17.png" alt="upload successful"></p></li><li><p>验证是否发布成功<br> <code>npm install xxx包</code></p></li></ol><p><img src="/images/pasted-18.png" alt="upload successful"></p><ol start="7"><li>更新版本<br><code>npm version &lt;update_type&gt; -m &quot;&lt;message&gt;&quot;</code><br>其中update_type 有三种：<br>patch增加一位补丁号（比如 1.1.1 -&gt; 1.1.2）<br>minor增加一位小版本号（比如 1.1.1 -&gt; 1.2.0）<br>major增加一位大版本号（比如 1.1.1 -&gt; 2.0.0）<br>比如：<br><code>npm version patch -m &quot;Version %s - v1.0.2&quot;</code><br>最后提交更新的版本：<br><code>npm publish</code></li><li>撤销自己发布的版本。这只是一个测试的包，最好当然还是撤销下来<br><code>npm --force unpublish test_npm</code></li></ol><font color="red">注:  删除要用force强制删除。超过24小时就不能删除了</font>]]></content>
      
      
      <categories>
          
          <category> npm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 创建npm包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS如何优雅的写判断语句(二)</title>
      <link href="/js-ru-he-you-ya-de-xie-pan-duan-yu-ju-er.html"/>
      <url>/js-ru-he-you-ya-de-xie-pan-duan-yu-ju-er.html</url>
      
        <content type="html"><![CDATA[<p>1.多重判断时使用 Array.includes<br>2.更少的嵌套，尽早 return<br>3.使用默认参数和解构<br>4.倾向于遍历对象而不是 Switch 语句<br>5.对 所有/部分 判断使用 Array.every &amp; Array.some</p><h5 id="1-多重判断时使用-Array-includes"><a href="#1-多重判断时使用-Array-includes" class="headerlink" title="1.多重判断时使用 Array.includes"></a>1.多重判断时使用 Array.includes</h5><p>例子:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fruit <span class="token operator">==</span> <span class="token string">'apple'</span> <span class="token operator">||</span> fruit <span class="token operator">==</span> <span class="token string">'strawberry'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>用 Array.includes (Array.includes)重写条件语句</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> redFruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'strawberry'</span><span class="token punctuation">,</span> <span class="token string">'cherry'</span><span class="token punctuation">,</span> <span class="token string">'cranberries'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>redFruits<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>把条件放入数组,利用includes判断,这样一来，代码看起来更整洁</p><h5 id="2-更少的嵌套，尽早-Return"><a href="#2-更少的嵌套，尽早-Return" class="headerlink" title="2.更少的嵌套，尽早 Return"></a>2.更少的嵌套，尽早 Return</h5><p>例子:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>fruit<span class="token punctuation">,</span> quantity<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> redFruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'strawberry'</span><span class="token punctuation">,</span> <span class="token string">'cherry'</span><span class="token punctuation">,</span> <span class="token string">'cranberries'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 条件 1: fruit 必须有值</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fruit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 条件 2: 必须是red的</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>redFruits<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 条件 3: quantity大于10</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>quantity <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'big quantity'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'No fruit!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 测试结果</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error: No fruits</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'apple'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// print: red</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// print: red, big quantity</span></code></pre><p>当发现无效语句时，尽早Return,少嵌套</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>fruit<span class="token punctuation">,</span> quantity<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> redFruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'strawberry'</span><span class="token punctuation">,</span> <span class="token string">'cherry'</span><span class="token punctuation">,</span> <span class="token string">'cranberries'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 条件 1: 尽早抛出错误</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fruit<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'No fruit!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 条件 2: 当水果不是红色时停止继续执行</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>redFruits<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 条件 3: 必须是大质量的</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>quantity <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'big quantity'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="3-使用默认参数和解构"><a href="#3-使用默认参数和解构" class="headerlink" title="3.使用默认参数和解构"></a>3.使用默认参数和解构</h5><p>需要检查 null / undefined的值和指定默认值,例子:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// fruit是一个对象{name: 'xx'} , quantity数量设置默认值为 1</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>fruit<span class="token punctuation">,</span> quantity<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 如果 quantity 参数没有传入，设置默认值为 1</span>  <span class="token keyword">const</span> q <span class="token operator">=</span> quantity <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 当值存在时打印 fruit 的值</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fruit <span class="token operator">&amp;&amp;</span> fruit<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`We have </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>quantity<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fruit<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'unknown'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用默认参数和解构 代替</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// fruit是一个对象{name: 'xx'} , quantity数量</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> quantity <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span>log <span class="token punctuation">(</span>name <span class="token operator">||</span> <span class="token string">'unknown'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="4-倾向于对象遍历而不是if-else-Switch语句"><a href="#4-倾向于对象遍历而不是if-else-Switch语句" class="headerlink" title="4.倾向于对象遍历而不是if/else Switch语句"></a>4.倾向于对象遍历而不是if/else Switch语句</h5><p>利用对象代替,可以参考上一篇文章</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> fruitColor <span class="token operator">=</span> <span class="token punctuation">{</span>  red<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'strawberry'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  yellow<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'pineapple'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  purple<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'grape'</span><span class="token punctuation">,</span> <span class="token string">'plum'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> fruitColor<span class="token punctuation">[</span>color<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="5-对-所有-部分-判断使用Array-every-amp-Array-some"><a href="#5-对-所有-部分-判断使用Array-every-amp-Array-some" class="headerlink" title="5.对 所有/部分 判断使用Array.every &amp; Array.some"></a>5.对 所有/部分 判断使用Array.every &amp; Array.some</h5><p>es6中every,当数组中的数据必须每个满足条件返回true</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> computers <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"Apple"</span><span class="token punctuation">,</span>ram<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"IBM"</span><span class="token punctuation">,</span>ram<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"Acer"</span><span class="token punctuation">,</span>ram<span class="token punctuation">:</span><span class="token number">32</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span>computers<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>computer <span class="token operator">=</span><span class="token operator">></span> computer<span class="token punctuation">.</span>ram <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>computers<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>computer <span class="token operator">=</span><span class="token operator">></span> computer<span class="token punctuation">.</span>ram <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span></code></pre><p>some,当数组中只要一条数据满足条件,就返回true</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> computers <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"Apple"</span><span class="token punctuation">,</span>ram<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"IBM"</span><span class="token punctuation">,</span>ram<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"Acer"</span><span class="token punctuation">,</span>ram<span class="token punctuation">:</span><span class="token number">32</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span>computers<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>computer <span class="token operator">=</span><span class="token operator">></span> computer<span class="token punctuation">.</span>ram <span class="token operator">></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>computers<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>computer <span class="token operator">=</span><span class="token operator">></span> computer<span class="token punctuation">.</span>ram <span class="token operator">></span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> js优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS如何优雅的写判断语句(一)</title>
      <link href="/js-ru-he-you-ya-de-xie-pan-duan-yu-ju.html"/>
      <url>/js-ru-he-you-ya-de-xie-pan-duan-yu-ju.html</url>
      
        <content type="html"><![CDATA[<h2 id="一-复杂判断优雅写法"><a href="#一-复杂判断优雅写法" class="headerlink" title="一.复杂判断优雅写法"></a>一.复杂判断优雅写法</h2><p>前言:js代码时经常遇到复杂逻辑判断的情况，通常大家可以用if/else或者switch来实现多个条件判断，但这样会有个问题，随着逻辑复杂度的增加，代码中的if/else/switch会变得越来越臃肿，越来越看不懂。</p><h3 id="1-1-一元条件判断"><a href="#1-1-一元条件判断" class="headerlink" title="1.1 一元条件判断"></a>1.1 一元条件判断</h3><h4 id="一般的写法-if-else-或者-switch"><a href="#一般的写法-if-else-或者-switch" class="headerlink" title="一般的写法 if/else 或者 switch"></a>一般的写法 if/else 或者 switch</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * @param {number} status 活动状态：1 开团进行 2 开团失败 3 商品售罄 4 开团成功 5 系统取消 */</span><span class="token keyword">const</span> onButtonClick <span class="token operator">=</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">sendLog</span><span class="token punctuation">(</span><span class="token string">'processing'</span><span class="token punctuation">)</span> <span class="token function">jumpTo</span><span class="token punctuation">(</span><span class="token string">'IndexPage'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">sendLog</span><span class="token punctuation">(</span><span class="token string">'fail'</span><span class="token punctuation">)</span> <span class="token function">jumpTo</span><span class="token punctuation">(</span><span class="token string">'FailPage'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">sendLog</span><span class="token punctuation">(</span><span class="token string">'fail'</span><span class="token punctuation">)</span> <span class="token function">jumpTo</span><span class="token punctuation">(</span><span class="token string">'FailPage'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">sendLog</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span> <span class="token function">jumpTo</span><span class="token punctuation">(</span><span class="token string">'SuccessPage'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">===</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">sendLog</span><span class="token punctuation">(</span><span class="token string">'cancel'</span><span class="token punctuation">)</span> <span class="token function">jumpTo</span><span class="token punctuation">(</span><span class="token string">'CancelPage'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">sendLog</span><span class="token punctuation">(</span><span class="token string">'other'</span><span class="token punctuation">)</span> <span class="token function">jumpTo</span><span class="token punctuation">(</span><span class="token string">'Index'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>优化方法一,将判断条件作为对象的属性名，将处理逻辑作为对象的属性值</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'1'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'processing'</span><span class="token punctuation">,</span> <span class="token string">'IndexPage'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'fail'</span><span class="token punctuation">,</span> <span class="token string">'FailPage'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'3'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'fail'</span><span class="token punctuation">,</span> <span class="token string">'FailPage'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'4'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'success'</span><span class="token punctuation">,</span> <span class="token string">'SuccessPage'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'5'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'cancel'</span><span class="token punctuation">,</span> <span class="token string">'CancelPage'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'other'</span><span class="token punctuation">,</span> <span class="token string">'Index'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">const</span> onButtonClick <span class="token operator">=</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">let</span> action <span class="token operator">=</span> actions<span class="token punctuation">[</span>status<span class="token punctuation">]</span> <span class="token operator">||</span> actions<span class="token punctuation">[</span><span class="token string">'default'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token keyword">let</span> logName <span class="token operator">=</span> action<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token keyword">let</span> pageName <span class="token operator">=</span> action<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token function">sendLog</span><span class="token punctuation">(</span>logName<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">jumpTo</span><span class="token punctuation">(</span>pageName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>优化方法二,es6里的Map对象</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'processing'</span><span class="token punctuation">,</span> <span class="token string">'IndexPage'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'fail'</span><span class="token punctuation">,</span> <span class="token string">'FailPage'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'fail'</span><span class="token punctuation">,</span> <span class="token string">'FailPage'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'success'</span><span class="token punctuation">,</span> <span class="token string">'SuccessPage'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'cancel'</span><span class="token punctuation">,</span> <span class="token string">'CancelPage'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span><span class="token string">'default'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'other'</span><span class="token punctuation">,</span> <span class="token string">'Index'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">const</span> onButtonClick <span class="token operator">=</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> action<span class="token operator">=</span>actions<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token operator">||</span>actions<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'default'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">sendLog</span><span class="token punctuation">(</span>action<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">jumpTo</span><span class="token punctuation">(</span>action<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="1-2-多条件同时判断"><a href="#1-2-多条件同时判断" class="headerlink" title="1.2 多条件同时判断"></a>1.2 多条件同时判断</h3><h4 id="多条件普通写法-if-else"><a href="#多条件普通写法-if-else" class="headerlink" title="多条件普通写法 if/else"></a>多条件普通写法 if/else</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> onButtonClick <span class="token operator">=</span> <span class="token punctuation">(</span>status<span class="token punctuation">,</span> identity<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>identity <span class="token operator">==</span> <span class="token string">'guest'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>identity <span class="token operator">==</span> <span class="token string">'master'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>优化写法一: 利用对象object 或者 map</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 利用object对象 字符串拼接</span><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'guest_1'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'guest_2'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//....</span><span class="token punctuation">}</span><span class="token keyword">const</span> onButtonClick <span class="token operator">=</span> <span class="token punctuation">(</span>identity<span class="token punctuation">,</span> status<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> action <span class="token operator">=</span> actions<span class="token punctuation">[</span><span class="token template-string"><span class="token string">`$ {identity}_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>status<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">]</span> <span class="token operator">||</span> actions<span class="token punctuation">[</span><span class="token string">'default'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     action<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 利用map对象 字符串拼接</span><span class="token keyword">const</span> actions<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">'guest_1'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'guest_2'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'master_1'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'master_2'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'default'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> onButtonClick <span class="token operator">=</span> <span class="token punctuation">(</span>identity<span class="token punctuation">,</span> status<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> action <span class="token operator">=</span> actions<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`$ {identity}_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>status<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span> <span class="token operator">||</span> actions<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'default'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     action<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>不拼接<br>优化方法二: 用Map对象，以Object对象作为key</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">{</span>identity<span class="token punctuation">:</span> <span class="token string">'guest'</span><span class="token punctuation">,</span>status<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>identity<span class="token punctuation">:</span> <span class="token string">'guest'</span><span class="token punctuation">,</span> status<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">const</span> onButtonClick <span class="token operator">=</span> <span class="token punctuation">(</span>identity<span class="token punctuation">,</span> status<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> action <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>actions<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span>key<span class="token punctuation">.</span>identity <span class="token operator">==</span> identity <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span>status <span class="token operator">==</span> status<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    action<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">></span>value<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><font color="red">注意:</font> 不能直接<code>actions.get({identity: &#39;guest&#39;,status: 1}).call(this)</code>调用 会报错,因为{identity: ‘guest’,status: 1},和map中定义的不是指的同一个对象地址</p>]]></content>
      
      
      
        <tags>
            
            <tag> js优化 </tag>
            
            <tag> map对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>input只能输入数字并限制长度</title>
      <link href="/input-zhi-neng-shu-ru-shu-zi-bing-xian-zhi-chang-du.html"/>
      <url>/input-zhi-neng-shu-ru-shu-zi-bing-xian-zhi-chang-du.html</url>
      
        <content type="html"><![CDATA[<h5 id="随笔记录"><a href="#随笔记录" class="headerlink" title="随笔记录"></a>随笔记录</h5><p>情景:要求只能输入数字,且限制长度,在谷歌浏览器移除input[number]的上下箭头样式</p><p><code>&lt;input type=&quot;text&quot;  maxlength=&quot;5&quot; /&gt;</code>  效果ok，当 <code>&lt;input type=&quot;number&quot;  maxlength=&quot;5&quot; /&gt;</code>时maxlength失效，长度可以无限输入 </p><p>解决参考代码:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>style<span class="token operator">></span><span class="token comment" spellcheck="true">/*在chrome下移除input[number]的上下箭头*/</span>input<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span>webkit<span class="token operator">-</span>outer<span class="token operator">-</span>spin<span class="token operator">-</span>button<span class="token punctuation">,</span>input<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span>webkit<span class="token operator">-</span>inner<span class="token operator">-</span>spin<span class="token operator">-</span>button<span class="token punctuation">{</span>    <span class="token operator">-</span>webkit<span class="token operator">-</span>appearance<span class="token punctuation">:</span> none <span class="token operator">!</span>important<span class="token punctuation">;</span>    margin<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*在firefox下移除input[number]的上下箭头*/</span>input<span class="token punctuation">[</span>type<span class="token operator">=</span><span class="token string">"number"</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token operator">-</span>moz<span class="token operator">-</span>appearance<span class="token punctuation">:</span>textfield<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>style<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"number"</span> oninput<span class="token operator">=</span><span class="token string">"if(value.length>5)value=value.slice(0,5)"</span><span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> html5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> htm5 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React生命周期(v16.3 之前版本)</title>
      <link href="/react-xin-jiu-sheng-ming-zhou-qi-dui-bi-v16-3.html"/>
      <url>/react-xin-jiu-sheng-ming-zhou-qi-dui-bi-v16-3.html</url>
      
        <content type="html"><![CDATA[<p>生命周期对react非常重要,对很多新手来说,搞不懂哪个阶段该做什么事情,迷茫,乱用函数,导致性能下降,死循环.<br>  文章主要记录了react平时常用的生命周期函数,及平时开发遇到的注意事项,自从react v16.3更新后,其生命周期还是发生很大的改变, 这里介绍v16.3之前的版本</p><h2 id="React-生命周期主要包括三个阶段："><a href="#React-生命周期主要包括三个阶段：" class="headerlink" title="React 生命周期主要包括三个阶段："></a>React 生命周期主要包括三个阶段：</h2><h3 id="1-初始化阶段"><a href="#1-初始化阶段" class="headerlink" title="1. 初始化阶段"></a>1. 初始化阶段</h3><h3 id="2-运行中阶段"><a href="#2-运行中阶段" class="headerlink" title="2. 运行中阶段"></a>2. 运行中阶段</h3><h3 id="3-销毁阶段"><a href="#3-销毁阶段" class="headerlink" title="3. 销毁阶段"></a>3. 销毁阶段</h3><p>(注:结合图来看文章有助理解)<br><img src="/images/react-life-cycle/old-life.png" alt></p><h3 id="1-初始化阶段-1"><a href="#1-初始化阶段-1" class="headerlink" title="1. 初始化阶段"></a>1. 初始化阶段</h3><h4 id="1-1-设置组件默认属性"><a href="#1-1-设置组件默认属性" class="headerlink" title="1-1.设置组件默认属性"></a>1-1.设置组件默认属性</h4><p>方法一 挂载组件的时候设置 props(比较常用)</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>title<span class="token punctuation">:</span> <span class="token string">'Hello'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>Hello data<span class="token operator">=</span><span class="token punctuation">{</span>data<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><p>方法二 defaultProps<br>在组件内部定义,此方法编译才生效,es6 会报错,使用es7以上(<a href="https://blog.csdn.net/lfcss/article/details/79627646" target="_blank">详情</a>)</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">static</span> defaultProps <span class="token operator">=</span> <span class="token punctuation">{</span>        age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span></code></pre><p>在组件外部属性定义</p><pre class=" language-javascript"><code class="language-javascript">Greeting<span class="token punctuation">.</span>defaultProps <span class="token operator">=</span> <span class="token punctuation">{</span>          name<span class="token punctuation">:</span> <span class="token string">'我是props的默认值！'</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    <span class="token operator">&lt;</span>Greeting <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'example'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="1-2-组件的初始化状态-state"><a href="#1-2-组件的初始化状态-state" class="headerlink" title="1-2.组件的初始化状态 state"></a>1-2.组件的初始化状态 state</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 不加super()，导致了this的 Reference Error</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>super关键字，它指代父类的实例（即父类的this对象）。子类必须在constructor方法中调用super方法，否则新建实例时会报错。这是因为子类没有自己的this对象，而是继承父类的this对象，然后对其进行加工。如果不调用super方法，子类就得不到this对象。<br>super(props):传递props作为super()的参数，那就是你需要在构造函数内使用this.props</p><h4 id="1-3-componentWillMount"><a href="#1-3-componentWillMount" class="headerlink" title="1-3.componentWillMount"></a>1-3.componentWillMount</h4><p>因为componentWillMount是在render之前执行，所以在这个方法中setState不会发生重新渲染(re-render),通常情况下，推荐用constructor()方法代替.<br>提示: 很多时候喜欢这里去做一些初始化数据的请求,你会发现数据还没请求到就渲染render()了,当请求到数据后setState再渲染出数据.依然重复渲染. 建议初始化数据都在componentDidMount()中使用,新版本将去掉这个函数.</p><h4 id="1-4-render"><a href="#1-4-render" class="headerlink" title="1-4.render"></a>1-4.render</h4><p>该方法会创建一个虚拟DOM，用来表示组件的输出。对于一个组件来讲，render方法是唯一一个必需的方法。render方法需要满足下面几点：</p><ol><li>只能通过 this.props 和 this.state 访问数据（不能修改）</li><li>可以返回 null,false 或者任何React组件</li><li>只能出现一个顶级组件，不能返回一组元素</li><li>不能改变组件的状态</li><li>不能修改DOM的输出<br>render方法返回的结果并不是真正的DOM元素，而是一个虚拟的表现，类似于一个DOM tree的结构的对象。</li></ol><h5 id="1-5-componentDidMount"><a href="#1-5-componentDidMount" class="headerlink" title="1-5. componentDidMount"></a>1-5. componentDidMount</h5><p>一般情况在这里做初始化异步数据请求</p><ol><li>这个方法会在render()之后立即执行；</li><li>这里可以对DOM进行操作，这个函数之后ref变成实际的DOM</li></ol><h4 id="2-组件运行阶段"><a href="#2-组件运行阶段" class="headerlink" title="2. 组件运行阶段"></a>2. 组件运行阶段</h4><p>此时组件已经渲染好并且用户可以与它进行交互，比如鼠标点击，手指点按，或者其它的一些事件，导致应用状态的改变，你将会看到下面的方法依次被调用<br>2-1.componentWillReceiveProps<br>组件的 props 属性可以通过父组件来更改，这时，componentWillReceiveProps 将来被调用。可以在这个方法里更新 state,以触发 render 方法重新渲染组件。</p><pre class=" language-javascript"><code class="language-javascript">componentWillReceiveProps<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">.</span>checked <span class="token operator">!==</span> undefined<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            checked<span class="token punctuation">:</span> nextProps<span class="token punctuation">.</span>checked        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2-2.shouldComponentUpdate(nextProps, nextState)<br>在接收新的props或state时确定是否发生重新渲染，默认情况返回true，表示会发生重新渲染<br>注意</p><ol><li>这个方法在首次渲染时或者forceUpdate()时不会触发;</li><li>这个方法如果返回false, 那么props或state发生改变的时候会阻止子组件发生重新渲染;</li><li>目前，如果返回false, 那么componentWillUpdate(nextProps, nextState), render(), componentDidUpdate()都不会被触发;</li></ol><p>2-3.componentWillUpdate<br>在props或state发生改变或者shouldComponentUpdate(nextProps, nextState)触发后, 在render()之前.<br>千万不要在这个函数中调用this.setState()方法,死循环.结合图表看.<br>2-4.render<br>同上 1-4<br>2-5.componentDidUpdate(object prevProps, object prevState)<br>这个方法和 componentDidMount 类似</p><h3 id="3-componentWillUnmount"><a href="#3-componentWillUnmount" class="headerlink" title="3.componentWillUnmount"></a>3.componentWillUnmount</h3><p>组件被销毁时触发。这里我们可以进行一些清理操作，例如清理定时器， 关闭抽屉弹框，取消Redux的订阅事件等等.</p><h2 id="总结对比"><a href="#总结对比" class="headerlink" title="总结对比"></a>总结对比</h2><p><strong><em>生命周期实例 <a href="https://codesandbox.io/s/q69zyw324" target="_blank">demo</a></em></strong><br><img src="/images/react-life-cycle/old-life-compare.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react生命周期 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6中箭头函数和function的区别</title>
      <link href="/es6-zhong-jian-tou-han-shu-he-function-de-qu-bie.html"/>
      <url>/es6-zhong-jian-tou-han-shu-he-function-de-qu-bie.html</url>
      
        <content type="html"><![CDATA[<h2 id="箭头函数和function的区别总结"><a href="#箭头函数和function的区别总结" class="headerlink" title="箭头函数和function的区别总结"></a>箭头函数和function的区别总结</h2><h4 id="1-箭头函数与function定义函数的写法"><a href="#1-箭头函数与function定义函数的写法" class="headerlink" title="1.箭头函数与function定义函数的写法"></a>1.箭头函数与function定义函数的写法</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//function   </span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 箭头函数</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="2-this的指向"><a href="#2-this的指向" class="headerlink" title="2.this的指向"></a>2.this的指向</h4><p>1.使用function定义的函数，this的指向随着调用环境的变化而变化的。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//使用function定义的函数</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> aa<span class="token punctuation">:</span> foo <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Window</span>obj<span class="token punctuation">.</span><span class="token function">aa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//obj { aa: foo }</span></code></pre><p>2.而箭头函数中的this指向是固定不变的，一直指向的是定义函数的环境，最近的作用域(个人理解)。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//使用箭头函数定义函数</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> aa<span class="token punctuation">:</span>foo <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Window</span>obj<span class="token punctuation">.</span><span class="token function">aa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Window</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>  foo<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  bar<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">}</span>a<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//undefined  原因:箭头函数中的this并不是指向a这个对象。对象a并不能构成一个作用域，所以再往上到达全局作用域，this就指向全局作用域,这里this指向Window。</span></code></pre><h4 id="3-构造函数"><a href="#3-构造函数" class="headerlink" title="3.构造函数"></a>3.构造函数</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//使用function方法定义构造函数</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> lenhart <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>lenhart<span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lenhart<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//{name: 'lenhart', age: 25}</span></code></pre><p>function是可以定义构造函数的，而箭头函数是不行的。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//尝试使用箭头函数</span><span class="token keyword">var</span> Person <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> lenhart <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'lenhart'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Uncaught TypeError: Person is not a constructor</span></code></pre><h4 id="4-变量提升"><a href="#4-变量提升" class="headerlink" title="4.变量提升"></a>4.变量提升</h4><p>由于js的内存机制，function的级别最高，而用箭头函数定义函数的时候，需要var(let const定义的时候更不必说)关键词，而var所定义的变量不能得到变量提升，故箭头函数一定要定义于调用之前！</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//123</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">arrowFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Uncaught TypeError: arrowFn is not a function</span><span class="token keyword">var</span> arrowFn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'456'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 箭头函数this </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 搭建和配置</title>
      <link href="/nginx-da-jian-he-pei-zhi.html"/>
      <url>/nginx-da-jian-he-pei-zhi.html</url>
      
        <content type="html"><![CDATA[<p>本文章适合新手,其中含有我在实际中遇到的问题解决分享,服务器在<a href="https://www.bwh8.net" target="_blank">搬瓦工</a>租的,不多废话直接上干货</p><h6 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h6><ul><li>操作系统：CenOS 6 x86</li><li>Nginx 版本：1.14.0</li></ul><hr><h3 id="Nginx搭建"><a href="#Nginx搭建" class="headerlink" title="Nginx搭建"></a>Nginx搭建</h3><h5 id="1-第一步-创建源配置"><a href="#1-第一步-创建源配置" class="headerlink" title="1.第一步 创建源配置"></a>1.第一步 创建源配置</h5><p>在/etc/yum.repos.d/目录下创建一个源配置文件nginx.repo</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /etc/yum.repos.d/vim nginx.repo</code></pre><p>填写如下内容：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>nginx<span class="token punctuation">]</span>name<span class="token operator">=</span>nginx repobaseurl<span class="token operator">=</span>http://nginx.org/packages/centos/<span class="token variable">$releasever</span>/<span class="token variable">$basearch</span>/gpgcheck<span class="token operator">=</span>0enabled<span class="token operator">=</span>1</code></pre><p>保存，则会产生一个/etc/yum.repos.d/nginx.repo文件。</p><h5 id="2-第二步-安装"><a href="#2-第二步-安装" class="headerlink" title="2.第二步 安装"></a>2.第二步 安装</h5><p>直接执行如下指令即可自动安装好Nginx：</p><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> nginx -y</code></pre><p>安装完成，下面直接就可以启动Nginx了：</p><pre class=" language-bash"><code class="language-bash">/etc/init.d/nginx start</code></pre><p>现在Nginx已经启动了，直接访问服务器就能看到Nginx欢迎页面了的。<br>如果还无法访问:<br>方法一:查看下服务器上端口是否80(阿里云上<a href="https://jingyan.baidu.com/article/03b2f78c31bdea5ea237ae88.html" target="_blank">配下80端口</a>)。<br>方法二:需配置一下Linux防火墙,以此执行如下命令:</p><pre class=" language-bash"><code class="language-bash">iptables -I INPUT 5 -i eth0 -p tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT<span class="token function">service</span> iptables save<span class="token function">service</span> iptables restart</code></pre><p>Nginx的相关命令：</p><pre class=" language-bash"><code class="language-bash">/etc/init.d/nginx start <span class="token comment" spellcheck="true"># 启动Nginx服务</span>/etc/init.d/nginx stop <span class="token comment" spellcheck="true"># 停止Nginx服务</span>/etc/nginx/nginx.conf <span class="token comment" spellcheck="true"># Nginx配置文件位置</span><span class="token function">chkconfig</span> nginx on    <span class="token comment" spellcheck="true">#设为开机启动</span></code></pre><h5 id="第三步-前端小优化-nginx开启gzip和缓存配置-nginx-conf"><a href="#第三步-前端小优化-nginx开启gzip和缓存配置-nginx-conf" class="headerlink" title="第三步 前端小优化 nginx开启gzip和缓存配置 (nginx.conf)"></a>第三步 前端小优化 nginx开启gzip和缓存配置 (nginx.conf)</h5><p>进入nginx 配置文件<code>vim /etc/nginx/nginx.conf</code>,添加如下配置:</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 开启gzip</span><span class="token function">gzip</span> on<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 启用gzip压缩的最小文件，小于设置值的文件将不会压缩</span>gzip_min_length 1k<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># gzip 压缩级别，1-10，数字越大压缩的越好，也越占用CPU时间，后面会有详细说明</span>gzip_comp_level 2<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 进行压缩的文件类型。javascript有多种形式。其中的值可以在 mime.types 文件中找到。</span>gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png font/ttf font/otf image/svg+xml<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 是否在http header中添加Vary: Accept-Encoding，建议开启</span>gzip_vary on<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 禁用IE 6 gzip</span>gzip_disable <span class="token string">"MSIE [1-6]\."</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 开启缓存</span>location ~* ^.+\.<span class="token punctuation">(</span>ico<span class="token operator">|</span>gif<span class="token operator">|</span>jpg<span class="token operator">|</span>jpeg<span class="token operator">|</span>png<span class="token punctuation">)</span>$ <span class="token punctuation">{</span>     access_log   off<span class="token punctuation">;</span>     expires      30d<span class="token punctuation">;</span><span class="token punctuation">}</span>location ~* ^.+\.<span class="token punctuation">(</span>css<span class="token operator">|</span>js<span class="token operator">|</span>txt<span class="token operator">|</span>xml<span class="token operator">|</span>swf<span class="token operator">|</span>wav<span class="token punctuation">)</span>$ <span class="token punctuation">{</span>    access_log   off<span class="token punctuation">;</span>    expires      24h<span class="token punctuation">;</span><span class="token punctuation">}</span>location ~* ^.+\.<span class="token punctuation">(</span>html<span class="token operator">|</span>htm<span class="token punctuation">)</span>$ <span class="token punctuation">{</span>    expires      1h<span class="token punctuation">;</span><span class="token punctuation">}</span>location ~* ^.+\.<span class="token punctuation">(</span>eot<span class="token operator">|</span>ttf<span class="token operator">|</span>otf<span class="token operator">|</span>woff<span class="token operator">|</span>svg<span class="token punctuation">)</span>$ <span class="token punctuation">{</span>    access_log   off<span class="token punctuation">;</span>    expires max<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 格式</span><span class="token comment" spellcheck="true"># expires 30s;</span><span class="token comment" spellcheck="true"># expires 30m;</span><span class="token comment" spellcheck="true"># expires 2h;</span><span class="token comment" spellcheck="true"># expires 30d;</span></code></pre><h5 id="相关报错问题处理"><a href="#相关报错问题处理" class="headerlink" title="相关报错问题处理"></a>相关报错问题处理</h5><p>1.vim使用报错:-bash: vim: command not found</p><p>使用命令 : <code>yum -y install vim*</code></p><p>2.解决Nginx下使用React-router(其他单页应用vue-router路由)刷新出现404问题<br>server需要重定向到index ,进入配置 <code>vim /etc/nginx/conf.d/default.conf</code></p><pre class=" language-bash"><code class="language-bash">server <span class="token punctuation">{</span>    listen 80<span class="token punctuation">;</span>    server_name zlzkj.io<span class="token punctuation">;</span>    index  index.html<span class="token punctuation">;</span>    root /Volumes/Mac/www/antd-admin/<span class="token punctuation">;</span>    location / <span class="token punctuation">{</span>        try_files <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ /index.html<span class="token punctuation">;</span>  //  指向index.html    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>至此，Nginx已经全部配置安装完成,如有问题欢迎留言或联系。</p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx  </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
